"""
Query Router for Adaptive RAG
ÏÇ¨Ïö©Ïûê ÏøºÎ¶¨Î•º Í∞ÄÏû• Í¥ÄÎ†®ÏÑ± ÎÜíÏùÄ Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§Î°ú ÎùºÏö∞ÌåÖ
"""

import logging
from typing import Literal
from pydantic import BaseModel, Field
from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI

logger = logging.getLogger(__name__)


class RouteQuery(BaseModel):
    """ÏÇ¨Ïö©Ïûê ÏøºÎ¶¨Î•º Í∞ÄÏû• Í¥ÄÎ†®ÏÑ± ÎÜíÏùÄ Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§Î°ú ÎùºÏö∞ÌåÖÌïòÎäî Îç∞Ïù¥ÌÑ∞ Î™®Îç∏"""

    datasource: Literal["vectorstore", "web_search"] = Field(
        ...,
        description="Given a user question choose to route it to web search or a vectorstore.",
    )


class QueryRouter:
    """ÏøºÎ¶¨ ÎùºÏö∞ÌÑ∞ ÌÅ¥ÎûòÏä§"""

    def __init__(self, model_name: str = "gpt-3.5-turbo", temperature: float = 0):
        self.llm = ChatOpenAI(model=model_name, temperature=temperature)
        self.structured_llm_router = self.llm.with_structured_output(RouteQuery)

        # ÏãúÏä§ÌÖú Î©îÏãúÏßÄÏôÄ ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏ÏùÑ Ìè¨Ìï®Ìïú ÌîÑÎ°¨ÌîÑÌä∏ ÌÖúÌîåÎ¶ø ÏÉùÏÑ±
        system_message = """ÎãπÏã†ÏùÄ ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏ÏùÑ Î≤°ÌÑ∞Ïä§ÌÜ†Ïñ¥ Í≤ÄÏÉâ ÎòêÎäî Ïõπ Í≤ÄÏÉâÏúºÎ°ú ÎùºÏö∞ÌåÖÌïòÎäî Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§.

üîç **Î≤°ÌÑ∞Ïä§ÌÜ†Ïñ¥**: 2024ÎÖÑ Íµ≠ÎÇ¥Ïô∏ AI ÏÇ∞ÏóÖ ÎèôÌñ• Ïó∞Íµ¨ Î¨∏ÏÑúÍ∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.
- Íµ≠Í∞ÄÎ≥Ñ AI Ï†ïÏ±Ö (ÌïúÍµ≠, ÎØ∏Íµ≠, Ï§ëÍµ≠, ÎèÖÏùº, ÏùºÎ≥∏, ÏòÅÍµ≠ Îì±)
- AI ÏÇ∞ÏóÖ ÎèôÌñ• Î∞è Í∏∞Ïà† Î∞úÏ†Ñ ÌòÑÌô©
- AI Í¥ÄÎ†® Ï†ïÏ±Ö, Ìà¨Ïûê, Í∏∞ÏóÖ Ï†ÑÎûµ
- 2024ÎÖÑ Í∏∞Ï§Ä AI ÏÉùÌÉúÍ≥Ñ Î∂ÑÏÑù

üåê **Ïõπ Í≤ÄÏÉâ**: Ïã§ÏãúÍ∞Ñ Ï†ïÎ≥¥ÎÇò Î¨∏ÏÑúÏóê ÏóÜÎäî ÏµúÏã† Ï†ïÎ≥¥
- Ïò§Îäò/Ïñ¥Ï†ú Î∞úÏÉùÌïú Îâ¥Ïä§
- Ïã§ÏãúÍ∞Ñ Ï£ºÍ∞Ä, ÌôòÏú®, ÎÇ†Ïî®
- Î¨∏ÏÑú Î∞úÌñâ Ïù¥ÌõÑÏùò ÏµúÏã† ÏóÖÎç∞Ïù¥Ìä∏

**ÎùºÏö∞ÌåÖ Í∞ÄÏù¥ÎìúÎùºÏù∏:**
1. **AI Ï†ïÏ±Ö, AI ÏÇ∞ÏóÖ, AI Í∏∞Ïà†, Íµ≠Í∞ÄÎ≥Ñ AI Ï†ÑÎûµ** ‚Üí vectorstore
2. **2024ÎÖÑ AI Í¥ÄÎ†® Ï†ïÎ≥¥** ‚Üí vectorstore (Î¨∏ÏÑúÍ∞Ä 2024ÎÖÑ Í∏∞Ï§Ä)  
3. **"Ïò§Îäò", "Ïñ¥Ï†ú", "ÏµúÏã† Îâ¥Ïä§", "Ïã§ÏãúÍ∞Ñ"** ‚Üí web_search
4. **Í∏∞ÏóÖÎ™Ö, Ï†ïÏ±ÖÎ™Ö, Í∏∞Ïà†Î™Ö** Í¥ÄÎ†® ‚Üí vectorstore Ïö∞ÏÑ†
5. **ÌôïÏã§ÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞** ‚Üí vectorstore Ïö∞ÏÑ† ÏÑ†ÌÉù"""

        self.route_prompt = ChatPromptTemplate.from_messages(
            [
                ("system", system_message),
                ("human", "{question}"),
            ]
        )

        # ÌîÑÎ°¨ÌîÑÌä∏ ÌÖúÌîåÎ¶øÍ≥º Íµ¨Ï°∞ÌôîÎêú LLM ÎùºÏö∞ÌÑ∞Î•º Í≤∞Ìï©
        self.question_router = self.route_prompt | self.structured_llm_router

    def route(self, question: str) -> str:
        """ÏßàÎ¨∏ÏùÑ Î∂ÑÏÑùÌïòÏó¨ Ï†ÅÏ†àÌïú Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§Î°ú ÎùºÏö∞ÌåÖ"""
        try:
            result = self.question_router.invoke({"question": question})
            datasource = result.datasource

            logger.info(f"Routed question to: {datasource}")
            logger.debug(f"Question: {question}")

            return datasource

        except Exception as e:
            logger.error(f"Error in query routing: {e}")
            # Í∏∞Î≥∏Ï†ÅÏúºÎ°ú vectorstoreÎ°ú ÎùºÏö∞ÌåÖ
            return "vectorstore"

    def route_question_node(self, state: dict) -> str:
        """LangGraph ÎÖ∏ÎìúÏö© ÎùºÏö∞ÌåÖ Ìï®Ïàò"""
        logger.info("==== [ROUTE QUESTION] ====")
        question = state["question"]

        source = self.route(question)

        if source == "web_search":
            logger.info("==== [ROUTE QUESTION TO WEB SEARCH] ====")
            return "web_search"
        elif source == "vectorstore":
            logger.info("==== [ROUTE QUESTION TO VECTORSTORE] ====")
            return "vectorstore"
        else:
            # Í∏∞Î≥∏Í∞í
            return "vectorstore"
